<nta><declaration>// Global Declarations
// Constants
const int NUMBER_OF_MODULES = 6;
const int NUMBER_OF_RECIPES = 3;
const int NUMBER_OF_WORKTYPES = 8;
const int NUMBER_OF_OUTPUTS = 4;

// User defined types.
// Safe means that we cannot go to -1.
// -1 is however sometimes needed as a filler value, so it can be permitted.
typedef int[-1, NUMBER_OF_MODULES - 1] mid_t;
typedef int[0, NUMBER_OF_MODULES - 1] mid_safe_t;
typedef int[-1, NUMBER_OF_RECIPES - 1] rid_t;
typedef int[0, NUMBER_OF_RECIPES - 1] rid_safe_t;
typedef int[-1, NUMBER_OF_WORKTYPES - 1] wid_t;
typedef int[0, NUMBER_OF_WORKTYPES - 1] wid_safe_t;
typedef int[-1, NUMBER_OF_OUTPUTS - 1] did_t;
typedef int[0, NUMBER_OF_OUTPUTS - 1] did_safe_t;

// Channels
chan enqueue[NUMBER_OF_MODULES];
chan dequeue[NUMBER_OF_MODULES];
chan intern[NUMBER_OF_MODULES];
chan remove[NUMBER_OF_RECIPES];
chan rstart[NUMBER_OF_RECIPES];
chan handshake[NUMBER_OF_RECIPES];
chan work[NUMBER_OF_WORKTYPES];

// Global clock and remaining heuristic
clock global_c;
meta int remaining;

// Variables for communicating values
int var;
int var2;

//Functions for tracking completed recipes
bool ra_done[NUMBER_OF_RECIPES];

void init_ra_done(){
    int i;
    for(i = 0; i &lt; NUMBER_OF_RECIPES; ++i)
        ra_done[i] = false;
}

bool is_done(rid_safe_t rid){
    return ra_done[rid];
}</declaration><template><name x="8" y="8">ModuleQueue</name><parameter>const mid_safe_t mid, const int length,  const bool worktype[NUMBER_OF_WORKTYPES], const int p_time[NUMBER_OF_WORKTYPES], const int cost_rate[NUMBER_OF_WORKTYPES]</parameter><declaration>// Place local declarations here.
rid_t queue[length]; //Queue for recipes waiting to be processed
did_t origin_queue[length]; //Queue for direction from which the recipes come

//Pops first element from queue
rid_t pop(){
    rid_t result = queue[0];
    int i;
    for(i = 0; i &lt; length; ++i){
	    if(i != length - 1){
            queue[i] = queue[i + 1];
        }
	    else {
            queue[i] = -1;
        }
    }
    return result;
}

//Adds element to back of queue
void add(rid_t recipe){
    int i;
    bool flag = true;
    for(i = 0; i &lt; length &amp;&amp; flag; ++i){
        if(queue[i] == -1){
            queue[i] = recipe;
            flag = false;
        }
    }
}

//Pops first element from origin_queue
did_t origin_pop(){
    did_t result = origin_queue[0];
    int i;
    for(i = 0; i &lt; length; ++i){
	    if(i != length - 1){
            origin_queue[i] = origin_queue[i + 1];
        }
	    else {
            origin_queue[i] = -1;
        }
    }
    return result;
}

// Adds element to the back of origin_queue
void origin_add(did_t direction){
    int i;
    bool flag = true;
    for(i = 0; i &lt; length &amp;&amp; flag; ++i){
        if(origin_queue[i] == -1){
            origin_queue[i] = direction;
            flag = false;
        }
    }
}

//Checks if queue of waiting recipes is not full
bool not_full(){
    if(queue[length - 1] == -1)
        return true;
    else
        return false;
}

//Checks if queue of waiting recipes is not empty
bool not_empty(){
    if(queue[0] != -1)
        return true;
    else
        return false;
}

//Initializing functions. Filling queues with -1's
void init_queues(){
    int i;
    for(i = 0; i &lt; length; ++i){
        queue[i] = -1;
        origin_queue[i] = -1;
    }
}

//Part of heuristic
//Calculates the remaining amount of work for a recipe
int calculate_remaining(rid_t rid){
    int remaining = 0;
    int i;
    for(i = 0; i &lt; NUMBER_OF_WORKTYPES; ++i)
        if(worktype[i])
            remaining += p_time[i] * cost_rate[i];
    return remaining;
}</declaration><location id="id0" x="8" y="-152"><committed /></location><location id="id1" x="8" y="-24" /><init ref="id0" /><transition><source ref="id0" /><target ref="id1" /><label kind="assignment" x="16" y="-128">init_queues()</label></transition><transition><source ref="id1" /><target ref="id1" /><label kind="guard" x="-184" y="8">not_full()</label><label kind="synchronisation" x="-184" y="24">enqueue[mid]?</label><label kind="assignment" x="-184" y="40">add(var),
remaining += calculate_remaining(var),
origin_add(var2)</label><nail x="-64" y="40" /><nail x="-64" y="-80" /></transition><transition><source ref="id1" /><target ref="id1" /><label kind="guard" x="80" y="-64">not_empty()</label><label kind="synchronisation" x="80" y="-48">dequeue[mid]!</label><label kind="assignment" x="80" y="-32">var = pop(),
var2 = origin_pop()</label><nail x="72" y="40" /><nail x="72" y="-80" /></transition></template><template><name>ModuleTransporter</name><parameter>const mid_safe_t mid, const int t_time[NUMBER_OF_OUTPUTS][NUMBER_OF_OUTPUTS], const mid_t next[NUMBER_OF_OUTPUTS], bool pass_through</parameter><declaration>clock local_c;
did_t origin; //Direction where recipe came from
did_t succ; //Direction in which recipe is going
rid_t lock = -1; //Recipe being worked on

// Returns true if recipe can be moved to module with id cid 
bool is_callable(mid_t cid){
   int i;
   for(i = 0; i &lt; NUMBER_OF_OUTPUTS; ++i)
        if(next[i] == cid){
            return true;
        }
   return false;
}

//Returns the inverse of a direction
//0 = up, 1 = right, 2 = down, 3 = left
did_safe_t inverse(did_safe_t direction){
if(direction == 0)
    return 2;
else if(direction == 1)
    return 3;
else if(direction == 2)
    return 0;
else
    return 1;
}  </declaration><location id="id2" x="232" y="-24"><name x="222" y="-54">Transporting</name><label kind="invariant" x="248" y="-16">local_c &lt;= t_time[origin][succ]</label></location><location id="id3" x="-64" y="-24"><name x="-80" y="-8">Selector</name><committed /></location><location id="id4" x="-424" y="-24"><name x="-472" y="-32">Idle</name></location><init ref="id4" /><transition><source ref="id3" /><target ref="id4" /><label kind="guard" x="-288" y="-72">lock != -1 &amp;&amp;
is_done(lock)</label><label kind="synchronisation" x="-284" y="-47">remove[lock]!</label></transition><transition><source ref="id2" /><target ref="id4" /><label kind="guard" x="-184" y="160">local_c == t_time[origin][succ]</label><label kind="synchronisation" x="-184" y="144">enqueue[next[succ]]!</label><label kind="assignment" x="-184" y="176">var = lock, 
var2 = inverse(succ)</label><nail x="232" y="128" /><nail x="-8" y="128" /><nail x="-208" y="128" /><nail x="-424" y="128" /></transition><transition><source ref="id3" /><target ref="id2" /><label kind="select" x="24" y="-120">e: did_safe_t</label><label kind="guard" x="24" y="-104">next[e] != -1 &amp;&amp;
lock != -1 &amp;&amp;
!is_done(lock)</label><label kind="assignment" x="24" y="-64">succ = e,
local_c = 0</label></transition><transition><source ref="id4" /><target ref="id3" /><label kind="synchronisation" x="-280" y="48">intern[mid]?</label><label kind="assignment" x="-280" y="64">lock = var,
origin = var2,
local_c = 0</label><nail x="-248" y="48" /></transition><transition><source ref="id4" /><target ref="id3" /><label kind="guard" x="-288" y="-192">pass_through</label><label kind="synchronisation" x="-288" y="-176">dequeue[mid]?</label><label kind="assignment" x="-288" y="-160">lock = var,
origin = var2,
local_c = 0</label><nail x="-248" y="-112" /></transition></template><template><name>ModuleWorker</name><parameter>const mid_safe_t mid, const bool worktype[NUMBER_OF_WORKTYPES],  const int p_time[NUMBER_OF_WORKTYPES], const int cost_rate[NUMBER_OF_WORKTYPES]</parameter><declaration>clock local_c;
did_t origin = -1; //Direction from which recipe came from
rid_t lock = -1; //Recipe being worked on
int work_index; //Work being performed  

//Keeps track of which works we have performed. 
//Reduces state space
bool unworked[NUMBER_OF_WORKTYPES];

void init_unworked(){
    int i;
    for(i = 0; i &lt; NUMBER_OF_WORKTYPES; ++i)
        unworked[i] = true;
}</declaration><location id="id5" x="-416" y="-80"><committed /></location><location id="id6" x="-416" y="24"><name x="-432" y="40">Idle</name></location><location id="id7" x="-48" y="-216"><name x="-58" y="-246">Handshaking</name><committed /></location><location id="id8" x="-416" y="-216"><name x="-424" y="-248">Done</name><committed /></location><location id="id9" x="176" y="24"><name x="152" y="40">Working</name><label kind="invariant" x="200" y="8">local_c &lt;= p_time[work_index] &amp;&amp;
cost' == cost_rate[work_index]</label></location><location id="id10" x="-144" y="24"><name x="-176" y="40">Selector</name><committed /></location><init ref="id5" /><transition><source ref="id5" /><target ref="id6" /><label kind="assignment" x="-528" y="-40">init_unworked()</label></transition><transition><source ref="id8" /><target ref="id5" /><label kind="synchronisation" x="-512" y="-167">intern[mid]!</label><label kind="assignment" x="-512" y="-152">var = lock,
var2 = origin</label></transition><transition><source ref="id8" /><target ref="id10" /><label kind="select" x="-256" y="-120">e: wid_safe_t</label><label kind="guard" x="-256" y="-104">worktype[e] &amp;&amp;
unworked[e]</label></transition><transition><source ref="id6" /><target ref="id10" /><label kind="synchronisation" x="-328" y="32">dequeue[mid]?</label><label kind="assignment" x="-328" y="48">lock = var,
origin = var2</label></transition><transition><source ref="id7" /><target ref="id8" /><label kind="synchronisation" x="-272" y="-256">work[work_index]!</label><label kind="assignment" x="-304" y="-240">unworked[work_index] = false</label></transition><transition><source ref="id9" /><target ref="id7" /><label kind="guard" x="80" y="-120">local_c == p_time[work_index]</label><label kind="synchronisation" x="80" y="-104">handshake[lock]?</label></transition><transition><source ref="id10" /><target ref="id9" /><label kind="select" x="-56" y="32">e: wid_safe_t</label><label kind="guard" x="-56" y="48">worktype[e] &amp;&amp;
unworked[e]</label><label kind="assignment" x="-56" y="80">work_index = e,
local_c = 0,
remaining -= p_time[e] * cost_rate[e]</label></transition></template><template><name>Recipe</name><parameter>rid_safe_t rid, mid_t mid_start, wid_safe_t&amp; n_work[NUMBER_OF_WORKTYPES],  int&amp; n_num_parents[NUMBER_OF_WORKTYPES], int&amp; n_children[NUMBER_OF_WORKTYPES][NUMBER_OF_WORKTYPES], int&amp; n_children_len[NUMBER_OF_WORKTYPES], const int length, did_safe_t origin</parameter><declaration>bool done = false; //Indicates when we are done with recipe; 
int current_nodes[length]; //Keeps track of currently accessible nodes, which can be worked 
int c_length = 0; // Length of current array to consider
int called_node = -1; // Node being worked on

// Called at beginning of recipe. Will find all independent nodes in dependency graph 
void get_upper_nodes(){
    int i;
    
    //Fill array with -1s otherwise it would be filled with 0s.
    //0 is an actual node index so we want to be able to differentiate
    for(i = 0; i &lt; length ; i++)
       current_nodes[i] = -1;

    //Searches through graph, if a node is found not to have a parent it is added.
    for(i = 0; i &lt; length ; i++)
        if(n_num_parents[i] == 0){
            current_nodes[c_length] = i;
	    c_length++;    
        }
}

//Checks whether a given work can be performed
bool is_callable(wid_safe_t w){
    int i;
    for(i = 0; i &lt; c_length; i++){
        if(n_work[current_nodes[i]] == w)
            return true;
    }
    return false;   
}

//Same as is_callable, but used to get the index of the node that is being worked on
int get_called_node(wid_safe_t w){
    int i;
    for(i = 0; i &lt; c_length; i++){
        if(n_work[current_nodes[i]] == w)
            return current_nodes[i];
    }
    return -1;  
} 

//Updates the current nodes array to reflect that work has been done.
void update_current_nodes(int called_id){
    int new_nodes[length];
    int i;
    int j = 0;
    
    // Collects all elements of current_nodes except for the node just worked on.
    // Decrements the size of array by 1
    for(i = 0; i &lt; c_length; i++){
        if(current_nodes[i] != called_id){
            new_nodes[j] = current_nodes[i]; 
            j++;
        }
    }
    c_length--;

    // Finds all children on the node that has been worked on and decrements their number of parents by 1
    for(i = 0; i &lt; n_children_len[called_id]; i++){  
        int res = --n_num_parents[n_children[called_id][i]];
        
        // If child has lost all it's parents :(
        // It is added to the array of current nodes
        if(res == 0){
            new_nodes[c_length] = n_children[called_id][i];
            c_length++;
        }
    }
    
    // Overwrite the old current array with new one
    for(i = 0; i &lt; c_length; i++)
        current_nodes[i] = new_nodes[i];  
} 

// Finishes recipe if all nodes have been processed
void no_more_nodes(){
   
    if(c_length == 0) {
	done = true;      
        ra_done[rid] = true; 
    }
}</declaration><location id="id11" x="-176" y="-160"><name x="-160" y="-168">Handshaking</name><committed /></location><location id="id12" x="-400" y="-160"><name x="-496" y="-168">InProgress</name></location><location id="id13" x="-400" y="-296"><name x="-410" y="-326">Start</name></location><init ref="id13" /><transition><source ref="id11" /><target ref="id12" /><label kind="select" x="-272" y="-96">e:wid_safe_t</label><label kind="guard" x="-272" y="-80">is_callable(e)</label><label kind="synchronisation" x="-272" y="-64">work[e]?</label><label kind="assignment" x="-272" y="-48">called_node = get_called_node(e),
update_current_nodes(called_node),
no_more_nodes()</label><nail x="-288" y="-96" /></transition><transition><source ref="id12" /><target ref="id11" /><label kind="guard" x="-336" y="-256">done != true</label><label kind="synchronisation" x="-336" y="-240">handshake[rid]!</label><nail x="-288" y="-216" /></transition><transition><source ref="id13" /><target ref="id12" /><label kind="synchronisation" x="-552" y="-256">rstart[rid]!</label><label kind="assignment" x="-552" y="-240">var = mid_start,
var2 = origin,
get_upper_nodes()</label></transition></template><template><name>RecipeQueue</name><parameter>rid_t &amp;queue[NUMBER_OF_RECIPES]</parameter><declaration>rid_t r = -1; //Recipe being worked on
mid_t start = -1; //Module queuing into
did_t origin; //Direction from which recipe came

//Pops a recipe off the recipe queue
rid_t pop(){
    rid_t result = queue[0];
    int i;
    for(i = 0; i &lt; NUMBER_OF_RECIPES; ++i){
	    if(i != NUMBER_OF_RECIPES - 1){
            queue[i] = queue[i + 1];
        }
	    else {
            queue[i] = -1;
        }
    }
    return result;
}

//Checks if queue is not empty
bool not_empty(){
    if(queue[0] != -1)
        return true;
    else
        return false;
}</declaration><location id="id14" x="-496" y="72"><committed /></location><location id="id15" x="-576" y="-48" /><location id="id16" x="-432" y="-48"><committed /></location><init ref="id15" /><transition><source ref="id14" /><target ref="id15" /><label kind="synchronisation" x="-664" y="0">enqueue[start]!</label><label kind="assignment" x="-664" y="16">var = r,
var2 = origin</label></transition><transition><source ref="id16" /><target ref="id14" /><label kind="synchronisation" x="-408" y="16">rstart[r]?</label><label kind="assignment" x="-408" y="31">start = var,
origin = var2</label></transition><transition><source ref="id15" /><target ref="id16" /><label kind="guard" x="-536" y="-88">not_empty()</label><label kind="assignment" x="-536" y="-72">r = pop()</label></transition></template><template><name>Coster</name><parameter>int constant_cost_rate</parameter><location id="id17" x="-360" y="-176"><label kind="invariant" x="-370" y="-161">cost' == constant_cost_rate</label></location><location id="id18" x="-360" y="-176" /><init ref="id17" /></template><template><name>Remover</name><location id="id19" x="-384" y="-120"><committed /></location><location id="id20" x="-224" y="-120" /><init ref="id19" /><transition><source ref="id19" /><target ref="id20" /><label kind="assignment" x="-352" y="-112">init_ra_done()</label></transition><transition><source ref="id20" /><target ref="id20" /><label kind="select" x="-152" y="-144">e: rid_safe_t</label><label kind="synchronisation" x="-152" y="-128">remove[e]?</label><nail x="-160" y="-184" /><nail x="-160" y="-64" /></transition></template><system>// Module 0
const int work_array0[NUMBER_OF_WORKTYPES] = {true, false, false, false, false, false, false, false};
const int ptime_array0[NUMBER_OF_WORKTYPES] = {60, 0, 0, 0, 0, 0, 0, 0};
const int crate_array0[NUMBER_OF_WORKTYPES] = {1, 0, 0, 0, 0, 0, 0, 0};
const mid_t next_array0[NUMBER_OF_OUTPUTS] = {-1, 1, -1, -1};
const int ttime_array0[NUMBER_OF_OUTPUTS][NUMBER_OF_OUTPUTS] = {{-1, -1, -1, -1}, {-1, -1, -1, 117}, {-1, -1, -1, -1}, {-1, 117, -1, -1}};
mqueue0 = ModuleQueue(0, 3, work_array0, ptime_array0, crate_array0);
mworker0 = ModuleWorker(0, work_array0, ptime_array0, crate_array0);
mtransporter0 = ModuleTransporter(0, ttime_array0, next_array0, false);

// Module 1
const int work_array1[NUMBER_OF_WORKTYPES] = {false, true, true, false, false, false, false, false};
const int ptime_array1[NUMBER_OF_WORKTYPES] = {0, 53, 106, 0, 0, 0, 0, 0};
const int crate_array1[NUMBER_OF_WORKTYPES] = {0, 1, 1, 0, 0, 0, 0, 0};
const mid_t next_array1[NUMBER_OF_OUTPUTS] = {-1, 2, -1, 0};
const int ttime_array1[NUMBER_OF_OUTPUTS][NUMBER_OF_OUTPUTS] = {{-1, -1, -1, -1}, {-1, -1, -1, 107}, {-1, -1, -1, -1}, {-1, 107, -1, -1}};
mqueue1 = ModuleQueue(1, 3, work_array1, ptime_array1, crate_array1);
mworker1 = ModuleWorker(1, work_array1, ptime_array1, crate_array1);
mtransporter1 = ModuleTransporter(1, ttime_array1, next_array1, false);

// Module 2
const int work_array2[NUMBER_OF_WORKTYPES] = {false, false, false, true, true, true, false, false};
const int ptime_array2[NUMBER_OF_WORKTYPES] = {0, 0, 0, 582, 752, 850, 0, 0};
const int crate_array2[NUMBER_OF_WORKTYPES] = {0, 0, 0, 1, 1, 1, 0, 0};
const mid_t next_array2[NUMBER_OF_OUTPUTS] = {-1, 3, -1, 1};
const int ttime_array2[NUMBER_OF_OUTPUTS][NUMBER_OF_OUTPUTS] = {{-1, -1, -1, -1}, {-1, -1, -1, 164}, {-1, -1, -1, -1}, {-1, 164, -1, -1}};
mqueue2 = ModuleQueue(2, 3, work_array2, ptime_array2, crate_array2);
mworker2 = ModuleWorker(2, work_array2, ptime_array2, crate_array2);
mtransporter2 = ModuleTransporter(2, ttime_array2, next_array2, true);

// Module 3
const int work_array3[NUMBER_OF_WORKTYPES] = {false, false, false, false, false, false, true, false};
const int ptime_array3[NUMBER_OF_WORKTYPES] = {0, 0, 0, 0, 0, 0, 20, 0};
const int crate_array3[NUMBER_OF_WORKTYPES] = {0, 0, 0, 0, 0, 0, 1, 0};
const mid_t next_array3[NUMBER_OF_OUTPUTS] = {-1, 4, -1, 2};
const int ttime_array3[NUMBER_OF_OUTPUTS][NUMBER_OF_OUTPUTS] = {{-1, -1, -1, -1}, {-1, -1, -1, 112}, {-1, -1, -1, -1}, {-1, 112, -1, -1}};
mqueue3 = ModuleQueue(3, 3, work_array3, ptime_array3, crate_array3);
mworker3 = ModuleWorker(3, work_array3, ptime_array3, crate_array3);
mtransporter3 = ModuleTransporter(3, ttime_array3, next_array3, false);

// Module 4
const int work_array4[NUMBER_OF_WORKTYPES] = {false, false, false, false, false, false, false, false};
const int ptime_array4[NUMBER_OF_WORKTYPES] = {0, 0, 0, 0, 0, 0, 0, 0};
const int crate_array4[NUMBER_OF_WORKTYPES] = {0, 0, 0, 0, 0, 0, 0, 0};
const mid_t next_array4[NUMBER_OF_OUTPUTS] = {-1, 5, -1, 3};
const int ttime_array4[NUMBER_OF_OUTPUTS][NUMBER_OF_OUTPUTS] = {{-1, -1, -1, -1}, {-1, -1, -1, 112}, {-1, -1, -1, -1}, {-1, 112, -1, -1}};
mqueue4 = ModuleQueue(4, 3, work_array4, ptime_array4, crate_array4);
mworker4 = ModuleWorker(4, work_array4, ptime_array4, crate_array4);
mtransporter4 = ModuleTransporter(4, ttime_array4, next_array4, true);

// Module 5
const int work_array5[NUMBER_OF_WORKTYPES] = {false, false, false, false, false, false, false, true};
const int ptime_array5[NUMBER_OF_WORKTYPES] = {0, 0, 0, 0, 0, 0, 0, 68};
const int crate_array5[NUMBER_OF_WORKTYPES] = {0, 0, 0, 0, 0, 0, 0, 1};
const mid_t next_array5[NUMBER_OF_OUTPUTS] = {-1, -1, -1, -1};
const int ttime_array5[NUMBER_OF_OUTPUTS][NUMBER_OF_OUTPUTS] = {{-1, -1, -1, -1}, {-1, -1, -1, -1}, {-1, -1, -1, -1}, {-1, 0, -1, -1}};
mqueue5 = ModuleQueue(5, 3, work_array5, ptime_array5, crate_array5);
mworker5 = ModuleWorker(5, work_array5, ptime_array5, crate_array5);
mtransporter5 = ModuleTransporter(5, ttime_array5, next_array5, true);

// Recipe 0
wid_t n_works0[NUMBER_OF_WORKTYPES] = {0, 2, 3, 6, 7, -1, -1, -1};
int num_parents0 [NUMBER_OF_WORKTYPES] = {0, 1, 1, 1, 1, -1, -1, -1};
int num_children0 [NUMBER_OF_WORKTYPES][NUMBER_OF_WORKTYPES] = {{1, -1, -1, -1, -1, -1, -1, -1}, {2, -1, -1, -1, -1, -1, -1, -1}, {3, -1, -1, -1, -1, -1, -1, -1}, {4, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}};
int n_children_len0[NUMBER_OF_WORKTYPES] = {1, 1, 1, 1, 0, -1, -1, -1};
recipe0 = Recipe(0, 0, n_works0, num_parents0, num_children0, n_children_len0, NUMBER_OF_WORKTYPES, 3);

// Recipe 1
wid_t n_works1[NUMBER_OF_WORKTYPES] = {0, 1, 4, 6, 7, -1, -1, -1};
int num_parents1 [NUMBER_OF_WORKTYPES] = {0, 1, 1, 1, 1, -1, -1, -1};
int num_children1 [NUMBER_OF_WORKTYPES][NUMBER_OF_WORKTYPES] = {{1, -1, -1, -1, -1, -1, -1, -1}, {2, -1, -1, -1, -1, -1, -1, -1}, {3, -1, -1, -1, -1, -1, -1, -1}, {4, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}};
int n_children_len1[NUMBER_OF_WORKTYPES] = {1, 1, 1, 1, 0, -1, -1, -1};
recipe1 = Recipe(1, 0, n_works1, num_parents1, num_children1, n_children_len1, NUMBER_OF_WORKTYPES, 3);

// Recipe 2
wid_t n_works2[NUMBER_OF_WORKTYPES] = {0, 2, 5, 6, 7, -1, -1, -1};
int num_parents2 [NUMBER_OF_WORKTYPES] = {0, 1, 1, 1, 1, -1, -1, -1};
int num_children2 [NUMBER_OF_WORKTYPES][NUMBER_OF_WORKTYPES] = {{1, -1, -1, -1, -1, -1, -1, -1}, {2, -1, -1, -1, -1, -1, -1, -1}, {3, -1, -1, -1, -1, -1, -1, -1}, {4, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}, {-1, -1, -1, -1, -1, -1, -1, -1}};
int n_children_len2[NUMBER_OF_WORKTYPES] = {1, 1, 1, 1, 0, -1, -1, -1};
recipe2 = Recipe(2, 0, n_works2, num_parents2, num_children2, n_children_len2, NUMBER_OF_WORKTYPES, 3);

rid_t rqa[NUMBER_OF_RECIPES] = {0, 1, 2};
rqueue = RecipeQueue(rqa);rem = Remover();
cos = Coster(1);
system mqueue0, mworker0, mtransporter0, mqueue1, mworker1, mtransporter1, mqueue2, mworker2, mtransporter2, mqueue3, mworker3, mtransporter3, mqueue4, mworker4, mtransporter4, mqueue5, mworker5, mtransporter5, rqueue, rem, cos, recipe0, recipe1, recipe2;</system></nta>