<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock y;

const int N = 10;
const int M = 7;
chan Transport[N], work[M];</declaration>
	<template>
		<name>NoCameraRecipe</name>
		<declaration>bool done = false;</declaration>
		<location id="id0" x="-85" y="238">
		</location>
		<location id="id1" x="-85" y="178">
		</location>
		<location id="id2" x="-85" y="102">
		</location>
		<location id="id3" x="-85" y="34">
		</location>
		<location id="id4" x="-85" y="-297">
		</location>
		<location id="id5" x="-85" y="-59">
		</location>
		<location id="id6" x="-85" y="-127">
		</location>
		<location id="id7" x="-85" y="-212">
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-68" y="195">Transport[0]?</label>
			<label kind="assignment" x="-51" y="221">done = true</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-59" y="119">work[6]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-60" y="51">work[4]!</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-76" y="-272">Transport[0]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-77" y="-42">work[2]!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-77" y="-110">work[1]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-77" y="-187">work[0]!</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Modul</name>
		<parameter>int id, int type, int p_time, int t_time,  int&amp; next[4], int length</parameter>
		<declaration>// Place local declarations here.
typedef int[0, 10] id_t;
clock x;

bool is_callable(id_t cid)
{
   int i;
   for(i=0; i&lt;length;++i){
        if(next[i] == cid){
            return true;
       }
    }
   return false;
}</declaration>
		<location id="id8" x="-76" y="272">
			<name x="-153" y="314">Transporting</name>
			<label kind="invariant" x="-86" y="289">x &lt;= t_time</label>
		</location>
		<location id="id9" x="187" y="34">
			<name x="177" y="0">Done</name>
		</location>
		<location id="id10" x="187" y="272">
			<name x="152" y="289">Processing</name>
			<label kind="invariant" x="153" y="306">x &lt;= p_time</label>
		</location>
		<location id="id11" x="-76" y="34">
			<name x="-86" y="0">Idle</name>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="select" x="-58" y="102">e: id_t</label>
			<label kind="guard" x="-58" y="119">is_callable(e)</label>
			<label kind="synchronisation" x="-58" y="136">Transport[e]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-204" y="238">Transport[id]?</label>
			<label kind="assignment" x="-178" y="263">x = 0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="guard" x="17" y="246">x == t_time</label>
			<label kind="assignment" x="34" y="272">x = 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="select" x="34" y="-42">e: id_t</label>
			<label kind="guard" x="8" y="-25">is_callable(e)</label>
			<label kind="synchronisation" x="8" y="-8">Transport[e]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="212" y="161">x == p_time</label>
			<label kind="synchronisation" x="212" y="127">work[type]?</label>
		</transition>
	</template>
	<template>
		<name>Recipe</name>
		<declaration>bool done = false;</declaration>
		<location id="id12" x="-93" y="229">
		</location>
		<location id="id13" x="-93" y="153">
		</location>
		<location id="id14" x="-93" y="76">
		</location>
		<location id="id15" x="-93" y="9">
		</location>
		<location id="id16" x="-93" y="-390">
		</location>
		<location id="id17" x="-93" y="-59">
		</location>
		<location id="id18" x="-93" y="-152">
		</location>
		<location id="id19" x="-93" y="-220">
		</location>
		<location id="id20" x="-93" y="-305">
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-85" y="170">Transport[0]?</label>
			<label kind="assignment" x="-85" y="187">done = true</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-85" y="102">work[6]!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-76" y="25">work[5]!</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-68" y="-42">work[4]!</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-76" y="-365">Transport[0]!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-85" y="-135">work[2]!</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-85" y="-203">work[1]!</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-85" y="-280">work[0]!</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
const int  t_time = 2; 

int a0[4] = {1, -1, -1, -1};
int a1[4] = {2, -1, -1, -1};
int a2[4] = {3, -1, -1, -1};
int a3[4] = {4, -1, -1, -1};
int a4[4] = {5, 7, -1, -1};
int a5[4] = {6, -1, -1, -1};
int a6[4] = {0, -1, -1, -1};
int a7[4] = {8, -1, -1, -1};
int a8[4] = {9, -1, -1, -1};
int a9[4] = {5, -1, -1, -1};
Process0 = Modul(0, 0, 5, t_time, a0, 1);
Process1 = Modul(1, 1, 5, t_time, a1, 1);
Process2 = Modul(2, 2, 5, t_time, a2, 1);
Process3 = Modul(3, 3, 5, t_time, a3, 1);
Process4 = Modul(4, 4, 5, t_time, a4, 2);
Process5 = Modul(5, 3, 5, 100, a5, 1);
Process6 = Modul(6, 6, 5, t_time, a6, 1);
Process7 = Modul(7, 3, 5, t_time, a7, 1);
Process8 = Modul(8, 5, 5, t_time, a8, 1);
Process9 = Modul(9, 3, 5, t_time, a9, 1);
recipe1 = Recipe();
recipe2 = NoCameraRecipe();

// List one or more processes to be composed into a system.
system recipe2, recipe1, Process0, Process1, Process2, Process3, Process4, Process5, Process6, Process7, Process8, Process9;
    </system>
	<queries>
		<query>
			<formula>E&lt;&gt; (recipe.done == true &amp;&amp; 40 &lt; y)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (recipe1.done == true &amp;&amp; recipe2.done == true) 
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (recipe2.done == true)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
